Problem:
    You have an array of integers where each value in array is either 1 or 2 or 3.
    return the sorted array with optimum time complexity

Input: first line you get size of the array and next values of the array
    size_of_array : 7
    array : [3, 2, 1, 1, 2, 3, 2]

Output: Array which is sorted
    array: [1, 1, 2, 2, 2, 3, 3]


# bubble sort ?
# Merge sort ?
# Quick sort ?

# All the array elements will be integers
# all the elements will be either 1 or 2 or 3


[3, 2, 1, 1, 2, 3, 2]

3 - 2      
2 - 3
1 - 2

1 1 2 2 2 3 3 -> O(n)

# Algo
1 you have a list 
2 take a element list 
3 Is elment present in the list 
    a. if present increse the count
    b. if not just add to the list 
4. do it for every element in the list
5. loop over our list and then create a sorted array.
